import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;


class Result {

    /*
     * Complete the 'applicationPairs' function below.
     *
     * The function is expected to return a 2D_INTEGER_ARRAY.
     * The function accepts following parameters:
     *  1. INTEGER deviceCapacity
     *  2. 2D_INTEGER_ARRAY foregroundAppList
     *  3. 2D_INTEGER_ARRAY backgroundAppList
     */

    public static List<List<Integer>> applicationPairs(int deviceCapacity, List<List<Integer>> foregroundAppList, List<List<Integer>> backgroundAppList) {
    // Write your code here
    
    
  return foregroundAppList;
    }

}
public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int deviceCapacity = Integer.parseInt(bufferedReader.readLine().trim());

        int foregroundAppListRows = Integer.parseInt(bufferedReader.readLine().trim());
        int foregroundAppListColumns = Integer.parseInt(bufferedReader.readLine().trim());

        List<List<Integer>> foregroundAppList = new ArrayList<>();

        IntStream.range(0, foregroundAppListRows).forEach(i -> {
            try {
                foregroundAppList.add(
                    Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                        .map(Integer::parseInt)
                        .collect(toList())
                );
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        int backgroundAppListRows = Integer.parseInt(bufferedReader.readLine().trim());
        int backgroundAppListColumns = Integer.parseInt(bufferedReader.readLine().trim());

        List<List<Integer>> backgroundAppList = new ArrayList<>();

        IntStream.range(0, backgroundAppListRows).forEach(i -> {
            try {
                backgroundAppList.add(
                    Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                        .map(Integer::parseInt)
                        .collect(toList())
                );
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        List<List<Integer>> result = Result.applicationPairs(deviceCapacity, foregroundAppList, backgroundAppList);

        result.stream()
            .map(
                r -> r.stream()
                    .map(Object::toString)
                    .collect(joining(" "))
            )
            .map(r -> r + "\n")
            .collect(toList())
            .forEach(e -> {
                try {
                    bufferedWriter.write(e);
                } catch (IOException ex) {
                    throw new RuntimeException(ex);
                }
            });

        bufferedReader.close();
        bufferedWriter.close();
    }
}
